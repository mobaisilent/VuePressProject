import type { ComputedRef, InjectionKey } from 'vue';
import type { PageData, PageHeader } from 'vuepress/client';
import type { ResolvedSidebarItem, SidebarConfig, SidebarConfigArray, SidebarConfigObject } from '../../shared/index.js';
export type SidebarItemsRef = ComputedRef<ResolvedSidebarItem[]>;
export declare const sidebarItemsSymbol: InjectionKey<SidebarItemsRef>;
/**
 * Inject sidebar items global computed
 */
export declare const useSidebarItems: () => SidebarItemsRef;
/**
 * Create sidebar items ref and provide as global computed in setup
 */
export declare const setupSidebarItems: () => void;
/**
 * Resolve sidebar items global computed
 *
 * It should only be resolved and provided once
 */
export declare const resolveSidebarItems: (sidebarConfig: SidebarConfig | 'auto' | false, sidebarDepth: number, page: PageData, path: string, routeLocale: string) => ResolvedSidebarItem[];
/**
 * Util to transform page header to sidebar item
 */
export declare const headerToSidebarItem: (sidebarDepth: number, header: PageHeader) => ResolvedSidebarItem;
export declare const headersToSidebarItemChildren: (sidebarDepth: number, headers: PageHeader[]) => ResolvedSidebarItem[];
/**
 * Resolve sidebar items if the config is `auto`
 */
export declare const resolveAutoSidebarItems: (sidebarDepth: number, page: PageData) => ResolvedSidebarItem[];
/**
 * Resolve sidebar items if the config is an array
 */
export declare const resolveArraySidebarItems: (sidebarConfig: SidebarConfigArray, sidebarDepth: number, page: PageData, path: string, prefix?: string) => ResolvedSidebarItem[];
/**
 * Resolve sidebar items if the config is a key -> value (path-prefix -> array) object
 */
export declare const resolveMultiSidebarItems: (sidebarConfig: SidebarConfigObject, sidebarDepth: number, page: PageData, path: string) => ResolvedSidebarItem[];
